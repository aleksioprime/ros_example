#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ROS2 –¥–ª—è headless —Ä–µ–∂–∏–º–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ROS2 –±–µ–∑ GUI
"""
import rclpy
from rclpy.node import Node
from std_msgs.msg import String, Float64
from geometry_msgs.msg import Twist, Point
import math
import time
import json


class HeadlessDemo(Node):
    def __init__(self):
        super().__init__('headless_demo')

        # Publishers
        self.status_publisher = self.create_publisher(String, '/demo/status', 10)
        self.velocity_publisher = self.create_publisher(Twist, '/demo/velocity', 10)
        self.position_publisher = self.create_publisher(Point, '/demo/position', 10)
        self.metrics_publisher = self.create_publisher(String, '/demo/metrics', 10)

        # Subscribers
        self.velocity_subscriber = self.create_subscription(
            Twist, '/demo/velocity', self.velocity_callback, 10)

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω—Ä—ã
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        self.start_time = time.time()
        self.message_count = 0

        # –¢–∞–π–º–µ—Ä—ã
        self.move_timer = self.create_timer(0.1, self.update_movement)
        self.status_timer = self.create_timer(1.0, self.publish_status)
        self.metrics_timer = self.create_timer(5.0, self.publish_metrics)

        self.get_logger().info('üöÄ Headless Demo –∑–∞–ø—É—â–µ–Ω!')
        self.get_logger().info('üìä –ë—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–æ–ø–∏–∫–∏:')
        self.get_logger().info('   - /demo/status (—Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)')
        self.get_logger().info('   - /demo/velocity (–∫–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è)')
        self.get_logger().info('   - /demo/position (–ø–æ–∑–∏—Ü–∏—è)')
        self.get_logger().info('   - /demo/metrics (–º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)')

    def update_movement(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        current_time = time.time() - self.start_time

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è
        velocity = Twist()
        velocity.linear.x = 2.0 * math.sin(current_time * 0.5)
        velocity.angular.z = 1.0 * math.cos(current_time * 0.3)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        dt = 0.1
        self.x += velocity.linear.x * dt * math.cos(self.theta)
        self.y += velocity.linear.x * dt * math.sin(self.theta)
        self.theta += velocity.angular.z * dt

        # –ü—É–±–ª–∏–∫—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ø–æ–∑–∏—Ü–∏—é
        self.velocity_publisher.publish(velocity)

        position = Point()
        position.x = self.x
        position.y = self.y
        position.z = self.theta
        self.position_publisher.publish(position)

        self.message_count += 1

    def publish_status(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        current_time = time.time() - self.start_time

        status_data = {
            'uptime_seconds': round(current_time, 1),
            'position': {'x': round(self.x, 2), 'y': round(self.y, 2)},
            'orientation': round(self.theta, 2),
            'messages_sent': self.message_count,
            'status': 'running'
        }

        status_msg = String()
        status_msg.data = json.dumps(status_data)
        self.status_publisher.publish(status_msg)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        self.get_logger().info(
            f'üìç –ü–æ–∑–∏—Ü–∏—è: ({self.x:.2f}, {self.y:.2f}), '
            f'–£–≥–æ–ª: {self.theta:.2f}, '
            f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {current_time:.1f}—Å'
        )

    def publish_metrics(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        current_time = time.time() - self.start_time

        metrics = {
            'total_runtime': round(current_time, 1),
            'messages_per_second': round(self.message_count / current_time, 2),
            'distance_traveled': round(math.sqrt(self.x**2 + self.y**2), 2),
            'total_messages': self.message_count
        }

        metrics_msg = String()
        metrics_msg.data = json.dumps(metrics)
        self.metrics_publisher.publish(metrics_msg)

        self.get_logger().info(
            f'üìä –ú–ï–¢–†–ò–ö–ò: '
            f'–°–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫: {metrics["messages_per_second"]}, '
            f'–ü—Ä–æ–π–¥–µ–Ω–æ: {metrics["distance_traveled"]:.2f}–º'
        )

    def velocity_callback(self, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        # –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        pass


def main(args=None):
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ROS2 Headless Demo...")
    rclpy.init(args=args)
    demo_node = HeadlessDemo()

    try:
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ø–∏–∫–æ–≤:")
        print("   ros2 topic echo /demo/status")
        print("   ros2 topic echo /demo/metrics")
        print("")
        rclpy.spin(demo_node)
    except KeyboardInterrupt:
        demo_node.get_logger().info('üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    finally:
        demo_node.destroy_node()
        rclpy.shutdown()
        print("üëã ROS2 Headless Demo –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    main()
