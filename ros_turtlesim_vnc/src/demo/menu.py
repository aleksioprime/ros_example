#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º ROS2
"""
import os
import sys
import subprocess
import signal
import time
import threading
from pathlib import Path

class DemoMenu:
    def __init__(self):
        self.current_process = None
        self.base_path = Path("/ros_workspace/src/demo")
        self.programs = {
            "1": {"name": "–ë–∞–∑–æ–≤–æ–µ –∫—Ä—É–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", "file": "main.py"},
            "2": {"name": "–†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∞", "file": "square_demo.py"},
            "3": {"name": "–°–ø–∏—Ä–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", "file": "spiral_demo.py"},
            "4": {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∞–º–∏", "file": "keyboard_demo.py"},
            "5": {"name": "–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏", "file": "colorful_demo.py"},
        }

    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        os.system('clear')
        print("üê¢ ROS2 TurtleSim –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é")
        print("=" * 50)
        print()

        for key, program in self.programs.items():
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if (self.base_path / program["file"]).exists() else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            print(f"{key}. {program['name']} - {status}")

        print()
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        print("s. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É")
        print("r. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å TurtleSim")
        print("c. –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω TurtleSim")
        print("t. –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª ROS2")
        print("q. –í—ã—Ö–æ–¥")
        print()

        if self.current_process:
            print(f"üü¢ –°–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ (PID: {self.current_process.pid})")
        else:
            print("‚ö™ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        print()

    def stop_current_program(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        if self.current_process and self.current_process.poll() is None:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            self.current_process.terminate()
            try:
                self.current_process.wait(timeout=5)
                print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except subprocess.TimeoutExpired:
                print("‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                self.current_process.kill()
                self.current_process.wait()
            self.current_process = None
        else:
            print("‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")

    def run_program(self, program_file):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        self.stop_current_program()

        program_path = self.base_path / program_file
        if not program_path.exists():
            print(f"‚ùå –§–∞–π–ª {program_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        print(f"üöÄ –ó–∞–ø—É—Å–∫ {program_file}...")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 's' –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")

        env = os.environ.copy()
        env['DISPLAY'] = ':1'
        env['PYTHONPATH'] = '/opt/ros/jazzy/lib/python3.12/site-packages'

        try:
            self.current_process = subprocess.Popen([
                'python3', str(program_path)
            ], env=env, cwd=str(self.base_path.parent.parent))

            # –î–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(1)

            if self.current_process.poll() is None:
                print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                self.current_process = None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.current_process = None

    def restart_turtlesim(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å TurtleSim"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TurtleSim...")

        # –û—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã turtlesim
        os.system("pkill -f turtlesim_node")
        time.sleep(2)

        # –ó–∞–ø—É—Å—Ç–∏–º –∑–∞–Ω–æ–≤–æ
        env = os.environ.copy()
        env['DISPLAY'] = ':1'

        subprocess.Popen([
            'ros2', 'run', 'turtlesim', 'turtlesim_node'
        ], env=env)

        print("‚úÖ TurtleSim –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        time.sleep(2)

    def clear_turtlesim(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω TurtleSim"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ TurtleSim...")
        try:
            env = os.environ.copy()
            env['DISPLAY'] = ':1'

            result = subprocess.run([
                'ros2', 'service', 'call', '/clear', 'std_srvs/srv/Empty'
            ], env=env, capture_output=True, text=True, timeout=5)

            if result.returncode == 0:
                print("‚úÖ –≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")

        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —ç–∫—Ä–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def open_ros_terminal(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª —Å ROS2"""
        print("üñ•Ô∏è  –û—Ç–∫—Ä—ã—Ç–∏–µ ROS2 —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  ros2 topic list")
        print("  ros2 topic echo /turtle1/cmd_vel")
        print("  ros2 topic echo /turtle1/pose")
        print("  ros2 service list")
        print("  ros2 run turtlesim turtle_teleop_key")
        print()
        print("–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ 'exit'")
        print()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.system("source /opt/ros/jazzy/setup.bash && bash")

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é...")
        time.sleep(1)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(sig, frame):
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            self.stop_current_program()
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        try:
            while True:
                self.show_menu()
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip().lower()

                if choice == 'q':
                    self.stop_current_program()
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == 's':
                    self.stop_current_program()
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                elif choice == 'r':
                    self.restart_turtlesim()
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                elif choice == 'c':
                    self.clear_turtlesim()
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                elif choice == 't':
                    self.open_ros_terminal()
                elif choice in self.programs:
                    program = self.programs[choice]
                    self.run_program(program["file"])
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    time.sleep(1)

        except KeyboardInterrupt:
            print("\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            self.stop_current_program()
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop_current_program()


if __name__ == '__main__':
    menu = DemoMenu()
    menu.run()