#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ROS2 - —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∞
"""
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.srv import SetPen
from std_srvs.srv import Empty
import math
import time


class SquareDrawer(Node):
    def __init__(self):
        super().__init__('square_drawer')
        self.publisher_ = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)

        # –°–µ—Ä–≤–∏—Å—ã
        self.clear_client = self.create_client(Empty, '/clear')
        self.set_pen_client = self.create_client(SetPen, '/turtle1/set_pen')

        self.get_logger().info('üü¶ Square Drawer –∑–∞–ø—É—â–µ–Ω!')

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.side = 0  # –ö–∞–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ (0-3)
        self.start_time = time.time()
        self.phase = 'moving'  # 'moving' –∏–ª–∏ 'turning'
        self.phase_start = time.time()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.side_length_time = 2.0  # —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É
        self.turn_time = 0.5  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç
        self.linear_speed = 2.0
        self.angular_speed = math.pi / 2 / self.turn_time  # 90 –≥—Ä–∞–¥—É—Å–æ–≤ –∑–∞ turn_time —Å–µ–∫—É–Ω–¥

        # –¢–∞–π–º–µ—Ä
        self.timer = self.create_timer(0.1, self.draw_square)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.setup_drawing()

    def setup_drawing(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        # –ñ–¥–µ–º —Å–µ—Ä–≤–∏—Å—ã
        while not self.clear_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ /clear...')

        while not self.set_pen_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ /turtle1/set_pen...')

        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        self.clear_client.call_async(Empty.Request())

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–æ - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        pen_request = SetPen.Request()
        pen_request.r = 0
        pen_request.g = 255
        pen_request.b = 0
        pen_request.width = 3
        pen_request.off = False
        self.set_pen_client.call_async(pen_request)

        self.get_logger().info('üé® –ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å –∑–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç!')

    def draw_square(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–∞"""
        current_time = time.time()
        phase_duration = current_time - self.phase_start
        total_time = current_time - self.start_time

        msg = Twist()

        if self.side >= 4:
            # –ö–≤–∞–¥—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            if total_time < 15.0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 15 —Å–µ–∫—É–Ω–¥
                msg.linear.x = 0.0
                msg.angular.z = 0.0

                if int(total_time) % 3 == 0 and total_time - int(total_time) < 0.1:
                    self.get_logger().info('üéâ –ö–≤–∞–¥—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –õ—é–±—É–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º...')
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                self.get_logger().info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∞–¥—Ä–∞—Ç!')
                self.side = 0
                self.phase = 'moving'
                self.phase_start = current_time
                self.start_time = current_time

                # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç
                colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0)]
                color = colors[int(total_time / 15) % len(colors)]

                pen_request = SetPen.Request()
                pen_request.r = color[0]
                pen_request.g = color[1]
                pen_request.b = color[2]
                pen_request.width = 3
                pen_request.off = False
                self.set_pen_client.call_async(pen_request)
        else:
            if self.phase == 'moving':
                # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–∞
                if phase_duration < self.side_length_time:
                    msg.linear.x = self.linear_speed
                    msg.angular.z = 0.0

                    if int(phase_duration * 2) % 2 == 0 and phase_duration - int(phase_duration * 2) / 2 < 0.05:
                        self.get_logger().info(f'üü¶ –†–∏—Å—É—é —Å—Ç–æ—Ä–æ–Ω—É {self.side + 1}/4...')
                else:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–≤–æ—Ä–æ—Ç—É
                    self.phase = 'turning'
                    self.phase_start = current_time
                    self.get_logger().info(f'üîÑ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –ø–æ—Å–ª–µ —Å—Ç–æ—Ä–æ–Ω—ã {self.side + 1}')

            elif self.phase == 'turning':
                # –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
                if phase_duration < self.turn_time:
                    msg.linear.x = 0.0
                    msg.angular.z = self.angular_speed
                else:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
                    self.side += 1
                    self.phase = 'moving'
                    self.phase_start = current_time

                    if self.side < 4:
                        self.get_logger().info(f'‚úÖ –ü–æ–≤–æ—Ä–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Å—Ç–æ—Ä–æ–Ω—É {self.side + 1}')

        # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–º–∞–Ω–¥—É
        self.publisher_.publish(msg)


def main(args=None):
    print("üü¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Square Drawer...")
    rclpy.init(args=args)

    square_drawer = SquareDrawer()

    try:
        print("‚úÖ –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üé® –ß–µ—Ä–µ–ø–∞—Ö–∞ –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏")
        print("‚èπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        rclpy.spin(square_drawer)
    except KeyboardInterrupt:
        square_drawer.get_logger().info('üõë –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    finally:
        square_drawer.destroy_node()
        rclpy.shutdown()
        print("üëã Square Drawer –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    main()