#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ROS2 - —Ü–≤–µ—Ç–Ω–æ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
"""
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.srv import SetPen
from std_srvs.srv import Empty
import math
import time
import random


class ColorfulArtist(Node):
    def __init__(self):
        super().__init__('colorful_artist')
        self.publisher_ = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)

        # –°–µ—Ä–≤–∏—Å—ã
        self.clear_client = self.create_client(Empty, '/clear')
        self.set_pen_client = self.create_client(SetPen, '/turtle1/set_pen')

        self.get_logger().info('üé® Colorful Artist –∑–∞–ø—É—â–µ–Ω!')

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.start_time = time.time()
        self.last_color_change = time.time()
        self.pattern_start = time.time()
        self.current_pattern = 0

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.patterns = [
            {"name": "–¶–≤–µ—Ç–æ—á–µ–∫", "duration": 15, "func": self.draw_flower},
            {"name": "–ó–≤–µ–∑–¥–∞", "duration": 12, "func": self.draw_star},
            {"name": "–í–æ–ª–Ω—ã", "duration": 10, "func": self.draw_waves},
            {"name": "–°–ø–∏—Ä–∞–ª—å-—Ä–∞–¥—É–≥–∞", "duration": 18, "func": self.draw_rainbow_spiral}
        ]

        # –¢–∞–π–º–µ—Ä
        self.timer = self.create_timer(0.1, self.create_art)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.setup_drawing()

    def setup_drawing(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        # –ñ–¥–µ–º —Å–µ—Ä–≤–∏—Å—ã
        while not self.clear_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ /clear...')

        while not self.set_pen_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ /turtle1/set_pen...')

        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        self.clear_client.call_async(Empty.Request())

        # –ù–∞—á–∏–Ω–∞–µ–º —Å —è—Ä–∫–æ–≥–æ —Ü–≤–µ—Ç–∞
        self.set_random_pen_color()

        pattern_name = self.patterns[self.current_pattern]["name"]
        self.get_logger().info(f'üé® –ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å: {pattern_name}!')

    def set_random_pen_color(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —è—Ä–∫–∏–π —Ü–≤–µ—Ç –ø–µ—Ä–∞"""
        colors = [
            (255, 0, 0),    # –ö—Ä–∞—Å–Ω—ã–π
            (0, 255, 0),    # –ó–µ–ª–µ–Ω—ã–π
            (0, 0, 255),    # –°–∏–Ω–∏–π
            (255, 255, 0),  # –ñ–µ–ª—Ç—ã–π
            (255, 0, 255),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            (0, 255, 255),  # –ì–æ–ª—É–±–æ–π
            (255, 128, 0),  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            (128, 0, 255),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            (255, 0, 128),  # –†–æ–∑–æ–≤—ã–π
            (128, 255, 0),  # –õ–∞–π–º
        ]

        color = random.choice(colors)
        width = random.randint(2, 5)

        pen_request = SetPen.Request()
        pen_request.r = color[0]
        pen_request.g = color[1]
        pen_request.b = color[2]
        pen_request.width = width
        pen_request.off = False
        self.set_pen_client.call_async(pen_request)

    def draw_flower(self, pattern_time):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ—á–∫–∞"""
        msg = Twist()

        # –°–æ–∑–¥–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏
        petal_freq = 6.0  # –ß–∞—Å—Ç–æ—Ç–∞ –ª–µ–ø–µ—Å—Ç–∫–æ–≤
        base_speed = 1.5

        msg.linear.x = base_speed + math.sin(pattern_time * petal_freq) * 1.0
        msg.angular.z = 2.0 + math.cos(pattern_time * petal_freq * 0.7) * 1.5

        return msg

    def draw_star(self, pattern_time):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–≤–µ–∑–¥—ã"""
        msg = Twist()

        # –°–æ–∑–¥–∞–µ–º —É–≥–ª–æ–≤–∞—Ç—É—é –∑–≤–µ–∑–¥—É
        star_freq = 5.0
        angle_pattern = math.sin(pattern_time * star_freq)

        if abs(angle_pattern) > 0.7:
            msg.linear.x = 2.5
            msg.angular.z = 0.0
        else:
            msg.linear.x = 0.5
            msg.angular.z = 4.0 * (1 if angle_pattern > 0 else -1)

        return msg

    def draw_waves(self, pattern_time):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–æ–ª–Ω"""
        msg = Twist()

        wave1 = math.sin(pattern_time * 3.0)
        wave2 = math.cos(pattern_time * 2.0)

        msg.linear.x = 1.8 + wave2 * 0.5
        msg.angular.z = wave1 * 2.5

        return msg

    def draw_rainbow_spiral(self, pattern_time):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ä–∞–¥—É–∂–Ω–æ–π —Å–ø–∏—Ä–∞–ª–∏"""
        msg = Twist()

        # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è —Å–ø–∏—Ä–∞–ª—å
        radius_growth = pattern_time * 0.1
        spiral_speed = 3.0 + radius_growth

        msg.linear.x = 0.8 + radius_growth
        msg.angular.z = spiral_speed

        return msg

    def create_art(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞"""
        current_time = time.time()
        total_time = current_time - self.start_time
        pattern_time = current_time - self.pattern_start

        # –¢–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        current_pattern_info = self.patterns[self.current_pattern]
        pattern_duration = current_pattern_info["duration"]
        pattern_func = current_pattern_info["func"]

        # –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –∫–∞–∂–¥—ã–µ 2-3 —Å–µ–∫—É–Ω–¥—ã
        if current_time - self.last_color_change > random.uniform(2.0, 3.5):
            self.set_random_pen_color()
            self.last_color_change = current_time

        # –°–º–µ–Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if pattern_time >= pattern_duration:
            self.current_pattern = (self.current_pattern + 1) % len(self.patterns)
            self.pattern_start = current_time
            pattern_time = 0

            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            self.clear_client.call_async(Empty.Request())

            pattern_name = self.patterns[self.current_pattern]["name"]
            self.get_logger().info(f'üé® –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞: {pattern_name}!')

            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
            time.sleep(0.5)

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        msg = pattern_func(pattern_time)

        # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–º–∞–Ω–¥—É
        self.publisher_.publish(msg)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if int(pattern_time * 2) % 4 == 0 and pattern_time - int(pattern_time * 2) / 2 < 0.05:
            progress = int((pattern_time / pattern_duration) * 100)
            pattern_name = current_pattern_info["name"]
            self.get_logger().info(f'üé® {pattern_name}: {progress}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')


def main(args=None):
    print("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Colorful Artist...")
    rclpy.init(args=args)

    artist = ColorfulArtist()

    try:
        print("‚úÖ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üåà –ß–µ—Ä–µ–ø–∞—Ö–∞ –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ —É–∑–æ—Ä—ã:")
        print("   - –¶–≤–µ—Ç–æ—á–∫–∏")
        print("   - –ó–≤–µ–∑–¥—ã")
        print("   - –í–æ–ª–Ω—ã")
        print("   - –†–∞–¥—É–∂–Ω—ã–µ —Å–ø–∏—Ä–∞–ª–∏")
        print("üé≠ –¶–≤–µ—Ç–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π –º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("‚èπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        rclpy.spin(artist)
    except KeyboardInterrupt:
        artist.get_logger().info('üõë –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    finally:
        artist.destroy_node()
        rclpy.shutdown()
        print("üëã Colorful Artist –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    main()