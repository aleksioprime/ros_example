#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ROS2 - —Å–ø–∏—Ä–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
"""
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.srv import SetPen
from std_srvs.srv import Empty
import math
import time


class SpiralDrawer(Node):
    def __init__(self):
        super().__init__('spiral_drawer')
        self.publisher_ = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)

        # –°–µ—Ä–≤–∏—Å—ã
        self.clear_client = self.create_client(Empty, '/clear')
        self.set_pen_client = self.create_client(SetPen, '/turtle1/set_pen')

        self.get_logger().info('üåÄ Spiral Drawer –∑–∞–ø—É—â–µ–Ω!')

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.start_time = time.time()
        self.cycle_start = time.time()
        self.cycle_duration = 20.0  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª —Å–ø–∏—Ä–∞–ª–∏

        # –¢–∞–π–º–µ—Ä
        self.timer = self.create_timer(0.1, self.draw_spiral)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.setup_drawing()

    def setup_drawing(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        # –ñ–¥–µ–º —Å–µ—Ä–≤–∏—Å—ã
        while not self.clear_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ /clear...')

        while not self.set_pen_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ /turtle1/set_pen...')

        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        self.clear_client.call_async(Empty.Request())

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–æ - —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
        self.set_pen_color(0, 0, 255, 2)

        self.get_logger().info('üé® –ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å —Å–∏–Ω—é—é —Å–ø–∏—Ä–∞–ª—å!')

    def set_pen_color(self, r, g, b, width):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –ø–µ—Ä–∞"""
        pen_request = SetPen.Request()
        pen_request.r = r
        pen_request.g = g
        pen_request.b = b
        pen_request.width = width
        pen_request.off = False
        self.set_pen_client.call_async(pen_request)

    def draw_spiral(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–ø–∏—Ä–∞–ª–∏"""
        current_time = time.time()
        total_time = current_time - self.start_time
        cycle_time = current_time - self.cycle_start

        msg = Twist()

        if cycle_time >= self.cycle_duration:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
            self.cycle_start = current_time
            cycle_time = 0

            # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç
            colors = [
                (255, 0, 0, "–∫—Ä–∞—Å–Ω—É—é"),    # –ö—Ä–∞—Å–Ω—ã–π
                (0, 255, 0, "–∑–µ–ª–µ–Ω—É—é"),    # –ó–µ–ª–µ–Ω—ã–π
                (0, 0, 255, "—Å–∏–Ω—é—é"),      # –°–∏–Ω–∏–π
                (255, 255, 0, "–∂–µ–ª—Ç—É—é"),   # –ñ–µ–ª—Ç—ã–π
                (255, 0, 255, "—Ñ–∏–æ–ª–µ—Ç–æ–≤—É—é"), # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                (0, 255, 255, "–≥–æ–ª—É–±—É—é")   # –ì–æ–ª—É–±–æ–π
            ]

            color_index = int(total_time / self.cycle_duration) % len(colors)
            color = colors[color_index]

            self.set_pen_color(color[0], color[1], color[2], 2)
            self.get_logger().info(f'üé® –ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å {color[3]} —Å–ø–∏—Ä–∞–ª—å!')

            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å–ø–∏—Ä–∞–ª–∏
            self.clear_client.call_async(Empty.Request())

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–∏—Ä–∞–ª–∏
        progress = cycle_time / self.cycle_duration  # 0.0 - 1.0

        # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
        base_angular = 2.0
        angular_speed = base_angular + progress * 3.0

        # –ò–∑–º–µ–Ω—è—é—â–∞—è—Å—è –ª–∏–Ω–µ–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Ä–∞–ª–∏
        base_linear = 0.5
        linear_speed = base_linear + progress * 2.0

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å
        wave_factor = math.sin(cycle_time * 4.0) * 0.3

        msg.linear.x = linear_speed + wave_factor
        msg.angular.z = angular_speed

        # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–º–∞–Ω–¥—É
        self.publisher_.publish(msg)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if int(cycle_time * 2) % 4 == 0 and cycle_time - int(cycle_time * 2) / 2 < 0.05:
            progress_percent = int(progress * 100)
            self.get_logger().info(f'üåÄ –°–ø–∏—Ä–∞–ª—å: {progress_percent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ')


def main(args=None):
    print("üåÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spiral Drawer...")
    rclpy.init(args=args)

    spiral_drawer = SpiralDrawer()

    try:
        print("‚úÖ –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Ä–∞–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üé® –ß–µ—Ä–µ–ø–∞—Ö–∞ –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ —Å–ø–∏—Ä–∞–ª–∏")
        print("üåà –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ - –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏ –Ω–æ–≤–∞—è —Å–ø–∏—Ä–∞–ª—å")
        print("‚èπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        rclpy.spin(spiral_drawer)
    except KeyboardInterrupt:
        spiral_drawer.get_logger().info('üõë –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    finally:
        spiral_drawer.destroy_node()
        rclpy.shutdown()
        print("üëã Spiral Drawer –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    main()