#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ROS2 –¥–ª—è XQuartz (X11 forwarding)
–£–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–ø–∞—Ö–æ–π –≤ TurtleSim —á–µ—Ä–µ–∑ X11 forwarding
"""
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from turtlesim.srv import Spawn, Kill, SetPen
from std_srvs.srv import Empty
import math
import time
import random


class XQuartzTurtleDemo(Node):
    def __init__(self):
        super().__init__('xquartz_turtle_demo')

        # Publishers
        self.cmd_vel_pub = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)

        # Subscribers
        self.pose_sub = self.create_subscription(
            Pose, '/turtle1/pose', self.pose_callback, 10)

        # Service clients
        self.spawn_client = self.create_client(Spawn, '/spawn')
        self.kill_client = self.create_client(Kill, '/kill')
        self.clear_client = self.create_client(Empty, '/clear')
        self.set_pen_client = self.create_client(SetPen, '/turtle1/set_pen')

        # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∞ —á–µ—Ä–µ–ø–∞—Ö–∏
        self.current_pose = None
        self.demo_phase = 0
        self.start_time = time.time()
        self.phase_start_time = time.time()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self.demo_timer = self.create_timer(0.1, self.run_demo)

        self.get_logger().info('üé® XQuartz Turtle Demo –∑–∞–ø—É—â–µ–Ω!')
        self.get_logger().info('üñ•Ô∏è  –û–∫–Ω–æ TurtleSim –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ XQuartz')

        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        self.wait_for_services()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self.setup_demo()

    def wait_for_services(self):
        """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ROS2 —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services = [
            (self.clear_client, '/clear'),
            (self.set_pen_client, '/turtle1/set_pen'),
            (self.spawn_client, '/spawn')
        ]

        for client, service_name in services:
            self.get_logger().info(f'‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ {service_name}...')
            while not client.wait_for_service(timeout_sec=1.0):
                self.get_logger().info(f'‚è≥ –°–µ—Ä–≤–∏—Å {service_name} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...')

        self.get_logger().info('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!')

    def setup_demo(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        self.call_clear_service()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–æ
        self.set_pen_color(255, 0, 0, 3, True)  # –ö—Ä–∞—Å–Ω–æ–µ –ø–µ—Ä–æ

    def call_clear_service(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω TurtleSim"""
        request = Empty.Request()
        future = self.clear_client.call_async(request)

    def set_pen_color(self, r, g, b, width, on):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∞"""
        request = SetPen.Request()
        request.r = r
        request.g = g
        request.b = b
        request.width = width
        request.off = not on

        future = self.set_pen_client.call_async(request)

    def pose_callback(self, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–ø–∞—Ö–∏"""
        self.current_pose = msg

    def run_demo(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        if self.current_pose is None:
            return

        current_time = time.time()
        phase_duration = current_time - self.phase_start_time
        total_time = current_time - self.start_time

        cmd = Twist()

        # –§–∞–∑–∞ 0: –†–∏—Å—É–µ–º –∫—Ä—É–≥ (20 —Å–µ–∫—É–Ω–¥)
        if self.demo_phase == 0:
            if phase_duration < 20.0:
                cmd.linear.x = 2.0
                cmd.angular.z = 1.0
                if int(phase_duration) % 5 == 0 and phase_duration - int(phase_duration) < 0.1:
                    self.get_logger().info(f'üî¥ –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥... ({phase_duration:.1f}s)')
            else:
                self.demo_phase = 1
                self.phase_start_time = current_time
                self.set_pen_color(0, 255, 0, 5, True)  # –ó–µ–ª–µ–Ω–æ–µ –ø–µ—Ä–æ
                self.get_logger().info('üü¢ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–µ–ª–µ–Ω–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç—É!')

        # –§–∞–∑–∞ 1: –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç (16 —Å–µ–∫—É–Ω–¥)
        elif self.demo_phase == 1:
            if phase_duration < 16.0:
                cycle_time = phase_duration % 4.0
                if cycle_time < 2.0:
                    cmd.linear.x = 2.0  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                    cmd.angular.z = 0.0
                elif cycle_time < 2.5:
                    cmd.linear.x = 0.0  # –ü–æ–≤–æ—Ä–æ—Ç
                    cmd.angular.z = math.pi / 2.0 / 0.5  # 90 –≥—Ä–∞–¥—É—Å–æ–≤ –∑–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
                else:
                    cmd.linear.x = 0.0
                    cmd.angular.z = 0.0

                if int(phase_duration) % 4 == 0 and phase_duration - int(phase_duration) < 0.1:
                    self.get_logger().info(f'üü¢ –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç... ({phase_duration:.1f}s)')
            else:
                self.demo_phase = 2
                self.phase_start_time = current_time
                self.set_pen_color(0, 0, 255, 2, True)  # –°–∏–Ω–µ–µ –ø–µ—Ä–æ
                self.get_logger().info('üîµ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∏–Ω–∏–º –≤–æ–ª–Ω–∞–º!')

        # –§–∞–∑–∞ 2: –í–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (15 —Å–µ–∫—É–Ω–¥)
        elif self.demo_phase == 2:
            if phase_duration < 15.0:
                cmd.linear.x = 1.5
                cmd.angular.z = 2.0 * math.sin(phase_duration * 2.0)
                if int(phase_duration) % 3 == 0 and phase_duration - int(phase_duration) < 0.1:
                    self.get_logger().info(f'üîµ –†–∏—Å—É–µ–º —Å–∏–Ω–∏–µ –≤–æ–ª–Ω—ã... ({phase_duration:.1f}s)')
            else:
                self.demo_phase = 3
                self.phase_start_time = current_time
                self.set_pen_color(255, 255, 0, 4, True)  # –ñ–µ–ª—Ç–æ–µ –ø–µ—Ä–æ
                self.get_logger().info('üü° –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∂–µ–ª—Ç–æ–π —Å–ø–∏—Ä–∞–ª–∏!')

        # –§–∞–∑–∞ 3: –°–ø–∏—Ä–∞–ª—å (10 —Å–µ–∫—É–Ω–¥)
        elif self.demo_phase == 3:
            if phase_duration < 10.0:
                cmd.linear.x = 0.5 + phase_duration * 0.2
                cmd.angular.z = 3.0
                if int(phase_duration) % 2 == 0 and phase_duration - int(phase_duration) < 0.1:
                    self.get_logger().info(f'üü° –†–∏—Å—É–µ–º –∂–µ–ª—Ç—É—é —Å–ø–∏—Ä–∞–ª—å... ({phase_duration:.1f}s)')
            else:
                self.demo_phase = 4
                self.phase_start_time = current_time
                self.get_logger().info('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä—è–µ–º...')
                self.call_clear_service()

        # –§–∞–∑–∞ 4: –ü–∞—É–∑–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        elif self.demo_phase == 4:
            if phase_duration < 3.0:
                cmd.linear.x = 0.0
                cmd.angular.z = 0.0
            else:
                self.demo_phase = 0
                self.phase_start_time = current_time
                self.set_pen_color(255, 0, 0, 3, True)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫—Ä–∞—Å–Ω–æ–º—É
                self.get_logger().info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å –∫—Ä–∞—Å–Ω–æ–≥–æ –∫—Ä—É–≥–∞!')

        # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–≤–∏–∂–µ–Ω–∏—è
        self.cmd_vel_pub.publish(cmd)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if int(total_time) % 10 == 0 and total_time - int(total_time) < 0.1:
            self.get_logger().info(f'‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time:.1f} —Å–µ–∫—É–Ω–¥')


def main(args=None):
    print("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è XQuartz Turtle Demo...")
    rclpy.init(args=args)

    demo_node = XQuartzTurtleDemo()

    try:
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üñ•Ô∏è  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–∫–Ω–æ–º TurtleSim –≤ XQuartz")
        print("üé® –ë—É–¥—É—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã: –∫—Ä—É–≥, –∫–≤–∞–¥—Ä–∞—Ç, –≤–æ–ª–Ω—ã –∏ —Å–ø–∏—Ä–∞–ª—å")
        print("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏")
        print("‚èπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("")
        rclpy.spin(demo_node)
    except KeyboardInterrupt:
        demo_node.get_logger().info('üõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    finally:
        demo_node.destroy_node()
        rclpy.shutdown()
        print("üëã XQuartz Turtle Demo –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    main()